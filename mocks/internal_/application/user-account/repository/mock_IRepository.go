// Code generated by mockery v2.52.4. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/radityacandra/banking-challenge/internal/application/user-account/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with given fields: ctx
func (_m *MockIRepository) BeginTransaction(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockIRepository_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIRepository_Expecter) BeginTransaction(ctx interface{}) *MockIRepository_BeginTransaction_Call {
	return &MockIRepository_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *MockIRepository_BeginTransaction_Call) Run(run func(ctx context.Context)) *MockIRepository_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIRepository_BeginTransaction_Call) Return(_a0 context.Context, _a1 error) *MockIRepository_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_BeginTransaction_Call) RunAndReturn(run func(context.Context) (context.Context, error)) *MockIRepository_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserAccountByAccountNo provides a mock function with given fields: ctx, accountNo
func (_m *MockIRepository) FindUserAccountByAccountNo(ctx context.Context, accountNo string) (*model.UserAccount, error) {
	ret := _m.Called(ctx, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for FindUserAccountByAccountNo")
	}

	var r0 *model.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.UserAccount, error)); ok {
		return rf(ctx, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserAccount); ok {
		r0 = rf(ctx, accountNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_FindUserAccountByAccountNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserAccountByAccountNo'
type MockIRepository_FindUserAccountByAccountNo_Call struct {
	*mock.Call
}

// FindUserAccountByAccountNo is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNo string
func (_e *MockIRepository_Expecter) FindUserAccountByAccountNo(ctx interface{}, accountNo interface{}) *MockIRepository_FindUserAccountByAccountNo_Call {
	return &MockIRepository_FindUserAccountByAccountNo_Call{Call: _e.mock.On("FindUserAccountByAccountNo", ctx, accountNo)}
}

func (_c *MockIRepository_FindUserAccountByAccountNo_Call) Run(run func(ctx context.Context, accountNo string)) *MockIRepository_FindUserAccountByAccountNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIRepository_FindUserAccountByAccountNo_Call) Return(_a0 *model.UserAccount, _a1 error) *MockIRepository_FindUserAccountByAccountNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_FindUserAccountByAccountNo_Call) RunAndReturn(run func(context.Context, string) (*model.UserAccount, error)) *MockIRepository_FindUserAccountByAccountNo_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserAccountByAccountNoLock provides a mock function with given fields: ctx, accountNo
func (_m *MockIRepository) FindUserAccountByAccountNoLock(ctx context.Context, accountNo string) (*model.UserAccount, error) {
	ret := _m.Called(ctx, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for FindUserAccountByAccountNoLock")
	}

	var r0 *model.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.UserAccount, error)); ok {
		return rf(ctx, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserAccount); ok {
		r0 = rf(ctx, accountNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_FindUserAccountByAccountNoLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserAccountByAccountNoLock'
type MockIRepository_FindUserAccountByAccountNoLock_Call struct {
	*mock.Call
}

// FindUserAccountByAccountNoLock is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNo string
func (_e *MockIRepository_Expecter) FindUserAccountByAccountNoLock(ctx interface{}, accountNo interface{}) *MockIRepository_FindUserAccountByAccountNoLock_Call {
	return &MockIRepository_FindUserAccountByAccountNoLock_Call{Call: _e.mock.On("FindUserAccountByAccountNoLock", ctx, accountNo)}
}

func (_c *MockIRepository_FindUserAccountByAccountNoLock_Call) Run(run func(ctx context.Context, accountNo string)) *MockIRepository_FindUserAccountByAccountNoLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIRepository_FindUserAccountByAccountNoLock_Call) Return(_a0 *model.UserAccount, _a1 error) *MockIRepository_FindUserAccountByAccountNoLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_FindUserAccountByAccountNoLock_Call) RunAndReturn(run func(context.Context, string) (*model.UserAccount, error)) *MockIRepository_FindUserAccountByAccountNoLock_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTransaction provides a mock function with given fields: ctx, userAccount, transactionHistory
func (_m *MockIRepository) SaveTransaction(ctx context.Context, userAccount model.UserAccount, transactionHistory model.TransactionHistory) error {
	ret := _m.Called(ctx, userAccount, transactionHistory)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserAccount, model.TransactionHistory) error); ok {
		r0 = rf(ctx, userAccount, transactionHistory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_SaveTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTransaction'
type MockIRepository_SaveTransaction_Call struct {
	*mock.Call
}

// SaveTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - userAccount model.UserAccount
//   - transactionHistory model.TransactionHistory
func (_e *MockIRepository_Expecter) SaveTransaction(ctx interface{}, userAccount interface{}, transactionHistory interface{}) *MockIRepository_SaveTransaction_Call {
	return &MockIRepository_SaveTransaction_Call{Call: _e.mock.On("SaveTransaction", ctx, userAccount, transactionHistory)}
}

func (_c *MockIRepository_SaveTransaction_Call) Run(run func(ctx context.Context, userAccount model.UserAccount, transactionHistory model.TransactionHistory)) *MockIRepository_SaveTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserAccount), args[2].(model.TransactionHistory))
	})
	return _c
}

func (_c *MockIRepository_SaveTransaction_Call) Return(_a0 error) *MockIRepository_SaveTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_SaveTransaction_Call) RunAndReturn(run func(context.Context, model.UserAccount, model.TransactionHistory) error) *MockIRepository_SaveTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
