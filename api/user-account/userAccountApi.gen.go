// Package useraccount provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package useraccount

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	// Remarks error description
	Remarks string `json:"remarks"`
}

// TransactionRequest defines model for TransactionRequest.
type TransactionRequest struct {
	// NoRekening user bank account number
	NoRekening string `json:"no_rekening" validate:"required"`

	// Nominal amount to be stored in IDR
	Nominal int64 `json:"nominal" validate:"required,gt=0"`
}

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	// Saldo user bank account balance
	Saldo int64 `json:"saldo"`
}

// AccountNumberParam defines model for AccountNumberParam.
type AccountNumberParam = string

// TransactionCreditPostJSONRequestBody defines body for TransactionCreditPost for application/json ContentType.
type TransactionCreditPostJSONRequestBody = TransactionRequest

// TransactionDebitPostJSONRequestBody defines body for TransactionDebitPost for application/json ContentType.
type TransactionDebitPostJSONRequestBody = TransactionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get latest user account balance
	// (GET /saldo/{no_rekening})
	AccountBalanceGet(ctx echo.Context, noRekening AccountNumberParam) error
	// Store money to user account (credit transaction)
	// (POST /tabung)
	TransactionCreditPost(ctx echo.Context) error
	// Withdraw money from user account (debit transaction)
	// (POST /tarik)
	TransactionDebitPost(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountBalanceGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountBalanceGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "no_rekening" -------------
	var noRekening AccountNumberParam

	err = runtime.BindStyledParameterWithOptions("simple", "no_rekening", ctx.Param("no_rekening"), &noRekening, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no_rekening: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountBalanceGet(ctx, noRekening)
	return err
}

// TransactionCreditPost converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionCreditPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TransactionCreditPost(ctx)
	return err
}

// TransactionDebitPost converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionDebitPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TransactionDebitPost(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/saldo/:no_rekening", wrapper.AccountBalanceGet)
	router.POST(baseURL+"/tabung", wrapper.TransactionCreditPost)
	router.POST(baseURL+"/tarik", wrapper.TransactionDebitPost)

}
